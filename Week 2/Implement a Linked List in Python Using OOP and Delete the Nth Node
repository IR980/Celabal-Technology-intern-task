Below is a Python program that implements a singly linked list using object-oriented programming principles. The solution includes:

A Node class to represent each node.

A LinkedList class with methods to:

Add a node to the end.

Print the list.

Delete the nth node (1-based index).

Exception handling for edge cases.


class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

class LinkedList:
    def __init__(self):
        self.head = None

    def add_node(self, data):
        
        new_node = Node(data)
        if not self.head:
            self.head = new_node
            return
        current = self.head
        while current.next:
            current = current.next
        current.next = new_node

    def print_list(self):
        """Prints all elements in the linked list."""
        if not self.head:
            print("List is empty.")
            return
        current = self.head
        while current:
            print(current.data, end=" -> ")
            current = current.next
        print("None")

    def delete_nth_node(self, n):
        
        if not self.head:
            raise Exception("Cannot delete from an empty list.")

        if n <= 0:
            raise ValueError("Index must be a positive integer (1-based index).")

        if n == 1:
            print(f"Deleting node {n} with value '{self.head.data}'")
            self.head = self.head.next
            return

        current = self.head
        count = 1
        while current and count < n - 1:
            current = current.next
            count += 1

        if not current or not current.next:
            raise IndexError("Index out of range.")

        print(f"Deleting node {n} with value '{current.next.data}'")
        current.next = current.next.next


# Create a LinkedList and add nodes
ll = LinkedList()
ll.add_node(10)
ll.add_node(20)
ll.add_node(30)
ll.add_node(40)
ll.add_node(50)

print("Initial List:")
ll.print_list()

# Delete node at position 2
try:
    ll.delete_nth_node(2)
except Exception as e:
    print("Error:", e)

print("List after deleting 4th node:")
ll.print_list()


try:
    ll.delete_nth_node(10)
except Exception as e:
    print("Error:", e)

# Try deleting from an empty list
empty_list = LinkedList()
try:
    empty_list.delete_nth_node(1)
except Exception as e:
    print("Error:", e)


Here the output is:-

Initial List:
10 -> 20 -> 30 -> 40 -> 50 -> None
Deleting node 2 with value '20'
List after deleting 4th node:
10 -> 30 -> 40 -> 50 -> None
Error: Index out of range.
Error: Cannot delete from an empty list.

